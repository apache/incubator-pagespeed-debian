Author: Maks Orlovich <morlovich@google.com>
Description: Relax image size comparisons in compression tests

--- a/src/net/instaweb/rewriter/image_rewrite_filter_test.cc
+++ b/src/net/instaweb/rewriter/image_rewrite_filter_test.cc
@@ -1244,7 +1244,7 @@
     // optimized image may change value slightly. To be resistant to such
     // change, we check the content size in a ragne, in stead of the exact
     // value. The range is defined by variable "threshold".
-    const int threshold = 30;
+    const int threshold = 200;
     int content_length = response_content.length();
     EXPECT_LE(expected_content_length - threshold, content_length)
         << content_length;
--- a/src/pagespeed/kernel/image/image_converter_test.cc
+++ b/src/pagespeed/kernel/image/image_converter_test.cc
@@ -317,7 +317,7 @@
         &message_handler_));
 
     // Verify that the size matches.
-    EXPECT_EQ(kValidImages[i].compressed_size, out.size())
+    EXPECT_NEAR(kValidImages[i].compressed_size, out.size(), 20)
         << "size mismatch for " << kValidImages[i].filename;
     // Verify that out put image type matches.
 
@@ -371,7 +371,7 @@
     ASSERT_TRUE(ImageConverter::ConvertPngToJpeg(
         *png_struct_reader_, in, options, &out, &message_handler_));
     // Verify that the size matches.
-    EXPECT_EQ(kValidGifImages[i].jpeg_size, out.size())
+    EXPECT_NEAR(kValidGifImages[i].jpeg_size, out.size(), 10)
         << "output size mismatch for " << kValidGifImages[i].filename;
   }
 }
--- a/src/pagespeed/kernel/image/jpeg_optimizer_test.cc
+++ b/src/pagespeed/kernel/image/jpeg_optimizer_test.cc
@@ -148,7 +148,7 @@
         << kValidImages[i].filename;
     EXPECT_EQ(kValidImages[i].original_size, src_data.size())
         << kValidImages[i].filename;
-    EXPECT_EQ(kValidImages[i].lossy_compressed_size, dest_data.size())
+    EXPECT_NEAR(kValidImages[i].lossy_compressed_size, dest_data.size(), 500)
         << kValidImages[i].filename;
   }
 }
@@ -168,13 +168,13 @@
                                       &message_handler_));
   size_t lossy_420_size =
       kValidImages[test_422_file_idx].lossy_compressed_size;
-  EXPECT_EQ(lossy_420_size, dest_data.size()) << src_filename;
+  EXPECT_NEAR(lossy_420_size, dest_data.size(), 10) << src_filename;
   AssertColorSampling(dest_data, 2, 2);
 
   // Calling optimize with ColorSampling::YUV420 will give samping as 420.
   AssertJpegOptimizeWithSampling(src_data, &dest_data,
                                  pagespeed::image_compression::YUV420, 2, 2);
-  EXPECT_EQ(lossy_420_size, dest_data.size()) << src_filename;
+  EXPECT_NEAR(lossy_420_size, dest_data.size(), 5) << src_filename;
 
   // Calling optimize with ColorSampling::RETAIN will leave samping as 422.
   AssertJpegOptimizeWithSampling(src_data, &dest_data,
@@ -328,8 +328,8 @@
         << kValidImages[i].filename;
     EXPECT_EQ(kValidImages[i].original_size, src_data.size())
         << kValidImages[i].filename;
-    EXPECT_EQ(kValidImages[i].progressive_and_lossy_compressed_size,
-              dest_data.size()) << kValidImages[i].filename;
+    EXPECT_NEAR(kValidImages[i].progressive_and_lossy_compressed_size,
+                dest_data.size(), 500) << kValidImages[i].filename;
   }
 }
 
--- a/src/pagespeed/kernel/image/png_optimizer_test.cc
+++ b/src/pagespeed/kernel/image/png_optimizer_test.cc
@@ -501,7 +501,7 @@
 
   ASSERT_TRUE(PngOptimizer::OptimizePng(*reader, in, &out, &message_handler))
       << info.filename;
-  EXPECT_EQ(info.compressed_size_default, out.size()) << info.filename;
+  EXPECT_NEAR(info.compressed_size_default, out.size(), 10) << info.filename;
   AssertPngEq(ref, out, info.filename, in_rgba);
 
   ASSERT_TRUE(png_reader.GetAttributes(
@@ -511,7 +511,7 @@
 
   ASSERT_TRUE(PngOptimizer::OptimizePngBestCompression(*reader, in, &out,
       &message_handler)) << info.filename;
-  EXPECT_EQ(info.compressed_size_best, out.size()) << info.filename;
+  EXPECT_NEAR(info.compressed_size_best, out.size(), 10) << info.filename;
   AssertPngEq(ref, out, info.filename, in_rgba);
 
   ASSERT_TRUE(png_reader.GetAttributes(
